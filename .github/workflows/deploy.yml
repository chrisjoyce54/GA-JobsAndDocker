name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    container: # this tells it to run this job in a container docker
      image:  node:16
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb #connection protocol is from docker documentation.  mongodb+srv
      MONGODB_CLUSTER_ADDRESS: mongdb     #matches label of services Line 23 cluster0.4u7hjvy.mongodb.net If the job is not running on a container then cluster address = 127.0.0.1
      MONGODB_USERNAME: root              #${{secrets.DB_USERNAME}}
      MONGODB_PASSWORD: example           # ${{secrets.PASSWORD}}
      PORT: 8080
    services:
      mongdb:                     #label could be anything
        image: mongo  # image hosted on docker hub
        env:
          MONGO_INITDB_ROOT_USERNAME: root  # only testing db fake creds
          MONGO_INITDB_ROOT_PASSWORD: example
    steps: 
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
